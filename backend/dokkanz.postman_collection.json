{
	"info": {
		"name": "dokkanz",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "00) ping",
			"item": [
				{
					"name": "success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Fail 1:\r",
									"in this case, there is no request body\r",
									"*/\r",
									"\r",
									"pm.test(\"output as expected\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.eql(\r",
									"        \r",
									"\r",
									"\r",
									"\r",
									"{\"success\":true}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									");});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8000/api/ping",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"ping"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "01) drop_create",
			"item": [
				{
					"name": "success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Fail 1:\r",
									"in this case, there is no request body\r",
									"*/\r",
									"\r",
									"pm.test(\"output as expected\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.eql(\r",
									"        \r",
									"\r",
									"\r",
									"\r",
									"{\"success\": true}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									");});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8000/api/drop_create",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"drop_create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "02) populate",
			"item": [
				{
					"name": "success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Fail 1:\r",
									"in this case, there is no request body\r",
									"*/\r",
									"\r",
									"pm.test(\"output as expected\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.eql(\r",
									"        \r",
									"\r",
									"\r",
									"\r",
									"{\"success\": true}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									");});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8000/api/populate",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"populate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "03) Product",
			"item": [
				{
					"name": "1) get",
					"item": [
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"products\": [\r",
											"        {\r",
											"            \"code\": 789456611,\r",
											"            \"id\": 1,\r",
											"            \"name\": \"Cheese\",\r",
											"            \"price\": 50.4,\r",
											"            \"quantity\": 7.89\r",
											"        },\r",
											"        {\r",
											"            \"code\": 789999884,\r",
											"            \"id\": 2,\r",
											"            \"name\": \"CPU\",\r",
											"            \"price\": 1.0,\r",
											"            \"quantity\": 9.0\r",
											"        },\r",
											"        {\r",
											"            \"code\": 789451,\r",
											"            \"id\": 3,\r",
											"            \"name\": \"Mouse\",\r",
											"            \"price\": 2.0,\r",
											"            \"quantity\": 9.0\r",
											"        },\r",
											"        {\r",
											"            \"code\": 8444441,\r",
											"            \"id\": 4,\r",
											"            \"name\": \"Mobile\",\r",
											"            \"price\": 20.1,\r",
											"            \"quantity\": 9.0\r",
											"        },\r",
											"        {\r",
											"            \"code\": null,\r",
											"            \"id\": 5,\r",
											"            \"name\": \"Printer\",\r",
											"            \"price\": 90.4,\r",
											"            \"quantity\": 2.0\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/products",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2) get id",
					"item": [
						{
							"name": "Fail: Pydantic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"id\"\r",
											"            ],\r",
											"            \"msg\": \"there is no Product with this id: 1000000000000\",\r",
											"            \"type\": \"value_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/products/1000000000000",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products",
										"1000000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"product\": {\r",
											"        \"categories\": [\r",
											"            {\r",
											"                \"category_id\": 1,\r",
											"                \"id\": 1,\r",
											"                \"product_id\": 1\r",
											"            },\r",
											"            {\r",
											"                \"category_id\": 2,\r",
											"                \"id\": 2,\r",
											"                \"product_id\": 1\r",
											"            },\r",
											"            {\r",
											"                \"category_id\": 3,\r",
											"                \"id\": 3,\r",
											"                \"product_id\": 1\r",
											"            },\r",
											"            {\r",
											"                \"category_id\": 4,\r",
											"                \"id\": 4,\r",
											"                \"product_id\": 1\r",
											"            },\r",
											"            {\r",
											"                \"category_id\": 5,\r",
											"                \"id\": 5,\r",
											"                \"product_id\": 1\r",
											"            }\r",
											"        ],\r",
											"        \"code\": 789456611,\r",
											"        \"id\": 1,\r",
											"        \"name\": \"Cheese\",\r",
											"        \"price\": 50.4,\r",
											"        \"quantity\": 7.89\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/products/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3) post products",
					"item": [
						{
							"name": "Request body not parsable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\"\r",
											"            ],\r",
											"            \"msg\": \"Cannot parse request body\",\r",
											"            \"type\": \"parse_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{"
								},
								"url": {
									"raw": "localhost:8000/api/products",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "No request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/products",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "pydantic Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product\",\r",
											"                \"name\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        },\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product\",\r",
											"                \"price\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        },\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product\",\r",
											"                \"quantity\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/products",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"product\": {\r",
											"        \"categories\": [],\r",
											"        \"code\": null,\r",
											"        \"id\": 6,\r",
											"        \"name\": \"464654\",\r",
											"        \"price\": 9874.0,\r",
											"        \"quantity\": 78754.0\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"464654\",\r\n    \"price\":9874,\r\n    \"quantity\":78754,\r\n    \"code\":null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/products",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4) delete products",
					"item": [
						{
							"name": "pydantic Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"id\"\r",
											"            ],\r",
											"            \"msg\": \"there is no Product with this id: 10000000000\",\r",
											"            \"type\": \"value_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/products/10000000000",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products",
										"10000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"result\": \"product deleted successfully\"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/products/6",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products",
										"6"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5) put products",
					"item": [
						{
							"name": "Request body not parsable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\"\r",
											"            ],\r",
											"            \"msg\": \"Cannot parse request body\",\r",
											"            \"type\": \"parse_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{"
								},
								"url": {
									"raw": "localhost:8000/api/products/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "No request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/products/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "pydantic Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product\",\r",
											"                \"name\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        },\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product\",\r",
											"                \"price\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        },\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product\",\r",
											"                \"quantity\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/products/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"product\": {\r",
											"        \"categories\": [],\r",
											"        \"code\": null,\r",
											"        \"id\": 5,\r",
											"        \"name\": \"464654\",\r",
											"        \"price\": 9874.0,\r",
											"        \"quantity\": 78754.0\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"464654\",\r\n    \"price\":9874,\r\n    \"quantity\":78754,\r\n    \"code\":null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/products/5",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"products",
										"5"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "04) Category",
			"item": [
				{
					"name": "1) get",
					"item": [
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"categories\": [\r",
											"        {\r",
											"            \"id\": 1,\r",
											"            \"name\": \"Electronics\",\r",
											"            \"parent_id\": null\r",
											"        },\r",
											"        {\r",
											"            \"id\": 2,\r",
											"            \"name\": \"Camera\",\r",
											"            \"parent_id\": 1\r",
											"        },\r",
											"        {\r",
											"            \"id\": 3,\r",
											"            \"name\": \"Eletronic Cameras\",\r",
											"            \"parent_id\": 2\r",
											"        },\r",
											"        {\r",
											"            \"id\": 4,\r",
											"            \"name\": \"Manual Cameras\",\r",
											"            \"parent_id\": 2\r",
											"        },\r",
											"        {\r",
											"            \"id\": 5,\r",
											"            \"name\": \"Cars\",\r",
											"            \"parent_id\": null\r",
											"        },\r",
											"        {\r",
											"            \"id\": 6,\r",
											"            \"name\": \"Sport Cars\",\r",
											"            \"parent_id\": 5\r",
											"        },\r",
											"        {\r",
											"            \"id\": 7,\r",
											"            \"name\": \"Electric Cars\",\r",
											"            \"parent_id\": 5\r",
											"        },\r",
											"        {\r",
											"            \"id\": 8,\r",
											"            \"name\": \"Tractors\",\r",
											"            \"parent_id\": 5\r",
											"        },\r",
											"        {\r",
											"            \"id\": 9,\r",
											"            \"name\": \"Tesla\",\r",
											"            \"parent_id\": 7\r",
											"        },\r",
											"        {\r",
											"            \"id\": 10,\r",
											"            \"name\": \"Clothes\",\r",
											"            \"parent_id\": null\r",
											"        },\r",
											"        {\r",
											"            \"id\": 11,\r",
											"            \"name\": \"Shirts\",\r",
											"            \"parent_id\": 10\r",
											"        },\r",
											"        {\r",
											"            \"id\": 12,\r",
											"            \"name\": \"Trousers\",\r",
											"            \"parent_id\": 10\r",
											"        },\r",
											"        {\r",
											"            \"id\": 13,\r",
											"            \"name\": \"Jackets\",\r",
											"            \"parent_id\": 10\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/categories",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2) get id",
					"item": [
						{
							"name": "Fail: Pydantic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"id\"\r",
											"            ],\r",
											"            \"msg\": \"there is no Category with this id: 1000000000000\",\r",
											"            \"type\": \"value_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/categories/1000000000000",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories",
										"1000000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"category\": {\r",
											"        \"children\": [\r",
											"            {\r",
											"                \"id\": 2,\r",
											"                \"name\": \"Camera\",\r",
											"                \"parent_id\": 1\r",
											"            }\r",
											"        ],\r",
											"        \"id\": 1,\r",
											"        \"name\": \"Electronics\",\r",
											"        \"parent\": null,\r",
											"        \"parent_id\": null,\r",
											"        \"products\": [\r",
											"            {\r",
											"                \"category_id\": 1,\r",
											"                \"id\": 1,\r",
											"                \"product_id\": 1\r",
											"            },\r",
											"            {\r",
											"                \"category_id\": 1,\r",
											"                \"id\": 6,\r",
											"                \"product_id\": 2\r",
											"            },\r",
											"            {\r",
											"                \"category_id\": 1,\r",
											"                \"id\": 11,\r",
											"                \"product_id\": 3\r",
											"            }\r",
											"        ]\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/categories/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3) post categories",
					"item": [
						{
							"name": "Request body not parsable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\"\r",
											"            ],\r",
											"            \"msg\": \"Cannot parse request body\",\r",
											"            \"type\": \"parse_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{"
								},
								"url": {
									"raw": "localhost:8000/api/categories",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "No request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"category\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/categories",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "pydantic Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"category\",\r",
											"                \"name\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        },\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"category\",\r",
											"                \"parent_id\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/categories",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"category\": {\r",
											"        \"children\": [],\r",
											"        \"id\": 14,\r",
											"        \"name\": \"464654\",\r",
											"        \"parent\": {\r",
											"            \"id\": 1,\r",
											"            \"name\": \"Electronics\",\r",
											"            \"parent_id\": null\r",
											"        },\r",
											"        \"parent_id\": 1,\r",
											"        \"products\": []\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"464654\",\r\n    \"parent_id\":1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/categories",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4) delete categories",
					"item": [
						{
							"name": "pydantic Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"id\"\r",
											"            ],\r",
											"            \"msg\": \"there is no Category with this id: 10000000000\",\r",
											"            \"type\": \"value_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/categories/10000000000",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories",
										"10000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"result\": \"category deleted successfully\"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/categories/14",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories",
										"14"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5) put categories",
					"item": [
						{
							"name": "Request body not parsable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\"\r",
											"            ],\r",
											"            \"msg\": \"Cannot parse request body\",\r",
											"            \"type\": \"parse_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{"
								},
								"url": {
									"raw": "localhost:8000/api/categories/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "No request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"category\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/categories/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "pydantic Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"category\",\r",
											"                \"name\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        },\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"category\",\r",
											"                \"parent_id\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/categories/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"category\": {\r",
											"        \"children\": [],\r",
											"        \"id\": 9,\r",
											"        \"name\": \"Tesla\",\r",
											"        \"parent\": {\r",
											"            \"id\": 5,\r",
											"            \"name\": \"Cars\",\r",
											"            \"parent_id\": null\r",
											"        },\r",
											"        \"parent_id\": 5,\r",
											"        \"products\": []\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Tesla\",\r\n    \"parent_id\":5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/categories/9",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories",
										"9"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "05) ProductCategory",
			"item": [
				{
					"name": "1) get",
					"item": [
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"categories\": [\r",
											"        {\r",
											"            \"category_id\": 1,\r",
											"            \"id\": 1,\r",
											"            \"product_id\": 1\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 2,\r",
											"            \"id\": 2,\r",
											"            \"product_id\": 1\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 3,\r",
											"            \"id\": 3,\r",
											"            \"product_id\": 1\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 4,\r",
											"            \"id\": 4,\r",
											"            \"product_id\": 1\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 5,\r",
											"            \"id\": 5,\r",
											"            \"product_id\": 1\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 1,\r",
											"            \"id\": 6,\r",
											"            \"product_id\": 2\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 2,\r",
											"            \"id\": 7,\r",
											"            \"product_id\": 2\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 3,\r",
											"            \"id\": 8,\r",
											"            \"product_id\": 2\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 4,\r",
											"            \"id\": 9,\r",
											"            \"product_id\": 2\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 5,\r",
											"            \"id\": 10,\r",
											"            \"product_id\": 2\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 1,\r",
											"            \"id\": 11,\r",
											"            \"product_id\": 3\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 2,\r",
											"            \"id\": 12,\r",
											"            \"product_id\": 3\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 3,\r",
											"            \"id\": 13,\r",
											"            \"product_id\": 3\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 4,\r",
											"            \"id\": 14,\r",
											"            \"product_id\": 3\r",
											"        },\r",
											"        {\r",
											"            \"category_id\": 5,\r",
											"            \"id\": 15,\r",
											"            \"product_id\": 3\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/product/categories",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"product",
										"categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2) get id",
					"item": [
						{
							"name": "Fail: Pydantic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"id\"\r",
											"            ],\r",
											"            \"msg\": \"there is no ProductCategory with this id: 1000000000000\",\r",
											"            \"type\": \"value_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/product/categories/1000000000000",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"product",
										"categories",
										"1000000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"category\": {\r",
											"        \"children\": [\r",
											"            {\r",
											"                \"id\": 2,\r",
											"                \"name\": \"Camera\",\r",
											"                \"parent_id\": 1\r",
											"            }\r",
											"        ],\r",
											"        \"id\": 1,\r",
											"        \"name\": \"Electronics\",\r",
											"        \"parent\": null,\r",
											"        \"parent_id\": null,\r",
											"        \"products\": [\r",
											"            {\r",
											"                \"category_id\": 1,\r",
											"                \"id\": 1,\r",
											"                \"product_id\": 1\r",
											"            },\r",
											"            {\r",
											"                \"category_id\": 1,\r",
											"                \"id\": 6,\r",
											"                \"product_id\": 2\r",
											"            },\r",
											"            {\r",
											"                \"category_id\": 1,\r",
											"                \"id\": 11,\r",
											"                \"product_id\": 3\r",
											"            }\r",
											"        ]\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/categories/1",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"categories",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3) post Product Category",
					"item": [
						{
							"name": "Request body not parsable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\"\r",
											"            ],\r",
											"            \"msg\": \"Cannot parse request body\",\r",
											"            \"type\": \"parse_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{"
								},
								"url": {
									"raw": "localhost:8000/api/product/categories",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"product",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "No request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product_category\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/product/categories",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"product",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "pydantic Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product_category\",\r",
											"                \"product_id\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        },\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"body\",\r",
											"                \"product_category\",\r",
											"                \"category_id\"\r",
											"            ],\r",
											"            \"msg\": \"field required\",\r",
											"            \"type\": \"value_error.missing\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/product/categories",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"product",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"product_category\": {\r",
											"        \"category\": {\r",
											"            \"id\": 5,\r",
											"            \"name\": \"Cars\",\r",
											"            \"parent_id\": null\r",
											"        },\r",
											"        \"category_id\": 5,\r",
											"        \"id\": 16,\r",
											"        \"product\": {\r",
											"            \"code\": 8444441,\r",
											"            \"id\": 4,\r",
											"            \"name\": \"Mobile\",\r",
											"            \"price\": 20.1,\r",
											"            \"quantity\": 9.0\r",
											"        },\r",
											"        \"product_id\": 4\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"product_id\":4,\r\n    \"category_id\":5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/product/categories",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"product",
										"categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4) delete Product Category",
					"item": [
						{
							"name": "pydantic Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"detail\": [\r",
											"        {\r",
											"            \"loc\": [\r",
											"                \"id\"\r",
											"            ],\r",
											"            \"msg\": \"there is no ProductCategory with this id: 10000000000\",\r",
											"            \"type\": \"value_error\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/api/product/categories/10000000000",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"product",
										"categories",
										"10000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"{\r",
											"    \"suucess\": true,\r",
											"    \"result\": \"Product Category deleted successfully\"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8000/api/product/categories/16",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"product",
										"categories",
										"16"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}